#!/usr/bin/lua

-------------------------------------------------------------------------------
-- Modules:
-------------------------------------------------------------------------------
local flux = require 'flux'

local prog = string.match (arg[0], "([^/]+)$")
local shortprog = prog:match ("flux%-(.+)$")


-------------------------------------------------------------------------------
-- Local functions:
-------------------------------------------------------------------------------

local function alloc_tasks_hack (f, wreck, lwj)
    local r = {}
    local total = 0
    local size = f.size

    if (wreck.tasks_per_node or wreck.nnodes) then
        if wreck.ntasks == 1 then
            if wreck.tasks_per_node then
                if wreck.nnodes then
                    wreck.ntasks = wreck.tasks_per_node * wreck.nnodes
                else
                    wreck.ntasks = wreck.tasks_per_node * f.size
                end
            else
                wreck.ntasks = wreck.nnodes
            end
        end
    end

    wreck:say ("Allocating %d tasks across %d available nodes..\n",
                wreck.ntasks, size)
end

-------------------------------------------------------------------------------
-- Main program:
-------------------------------------------------------------------------------
--  Parse cmdline args:
--
local wreck = require 'wreck' .new (shortprog)

wreck:add_options ({
    { name = "tasks-per-node", char = "t", arg = "N",
        usage = "Force number of tasks per node" },
    { name = "nnodes", char = "N", arg = "N",
        usage = "Force number of nodes" },
    { name = "is_hierarchical", char = "H", arg = "H",
        usage = "Is hierarchical job" },
    { name = "hfile", char = "F", arg = "F",
        usage = "Hierarchical file" },
    { name = "walltime", char = "T", arg = "T",
        usage = "Walltime" },
})

if not wreck:parse_cmdline (arg) then
    wreck:die ("Failed to process cmdline args\n")
end

--  Create new connection to local cmbd:
--
local f, err = flux.new()
if not f then wreck:die ("Connecting to flux failed: %s\n", err) end

--
--  Create a job request as Lua table:
--
local jobreq = wreck:jobreq()
wreck.nnodes = wreck:getopt ("N")
wreck.tasks_per_node = wreck:getopt ("t")
alloc_tasks_hack (f, wreck, lwj)

wreck:say ("Submitting LWJ request for %d nodes %d tasks (cmdline \"%s\")\n",
    wreck.nnodes, wreck.ntasks, table.concat (wreck.cmdline, ' '))

--
--  Send job request message with tag="job.create"
--
local resp, err = f:rpc ('job.create', jobreq)
if not resp then wreck:die ("flux.rpc: %s\n", err) end

if resp.errnum then
    wreck:die ("job.create message failed with errnum=%d\n", resp.errnum)
end

wreck:say ("Submitted jobid %d\n", resp.jobid)

--
--  Get a handle to this lwj kvsdir:
--
local lwj, err = f:kvsdir ("lwj.%d", resp.jobid)
if not lwj then wreck:die ("f:kvsdir(lwj.%d): %s\n", resp.jobid, err) end

lwj.state = "submitted"
lwj:commit()

--
--  Send "submitted" event: 
--  This is so that JSC can be notified of this event through subscribe. 
--  Here, this doesn't have to wait for its own event because 
--  the schedsrv will not change the state until it sees this event.
--
local rc,err = f:sendevent ({lwj = resp.jobid}, "wreck.state.submitted")
if not rc then wreck:die ("sendevent: %s\n", err) end

os.exit (0)

-- vi: ts=4 sw=4 expandtab
